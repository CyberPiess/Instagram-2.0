// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	user "github.com/CyberPiess/instagram/internal/app/instagram/infrastructure/database/user"
	token "github.com/CyberPiess/instagram/internal/app/instagram/infrastructure/token"
	gomock "github.com/golang/mock/gomock"
)

// MockuserStorage is a mock of userStorage interface.
type MockuserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockuserStorageMockRecorder
}

// MockuserStorageMockRecorder is the mock recorder for MockuserStorage.
type MockuserStorageMockRecorder struct {
	mock *MockuserStorage
}

// NewMockuserStorage creates a new mock instance.
func NewMockuserStorage(ctrl *gomock.Controller) *MockuserStorage {
	mock := &MockuserStorage{ctrl: ctrl}
	mock.recorder = &MockuserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStorage) EXPECT() *MockuserStorageMockRecorder {
	return m.recorder
}

// IfEmailExist mocks base method.
func (m *MockuserStorage) IfEmailExist(newUSer user.UserDTO) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfEmailExist", newUSer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfEmailExist indicates an expected call of IfEmailExist.
func (mr *MockuserStorageMockRecorder) IfEmailExist(newUSer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfEmailExist", reflect.TypeOf((*MockuserStorage)(nil).IfEmailExist), newUSer)
}

// IfUserExist mocks base method.
func (m *MockuserStorage) IfUserExist(newUser user.UserDTO) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfUserExist", newUser)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfUserExist indicates an expected call of IfUserExist.
func (mr *MockuserStorageMockRecorder) IfUserExist(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfUserExist", reflect.TypeOf((*MockuserStorage)(nil).IfUserExist), newUser)
}

// Insert mocks base method.
func (m *MockuserStorage) Insert(newUser user.UserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockuserStorageMockRecorder) Insert(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockuserStorage)(nil).Insert), newUser)
}

// SelectUser mocks base method.
func (m *MockuserStorage) SelectUser(username string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockuserStorageMockRecorder) SelectUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockuserStorage)(nil).SelectUser), username)
}

// MocktokenInteraction is a mock of tokenInteraction interface.
type MocktokenInteraction struct {
	ctrl     *gomock.Controller
	recorder *MocktokenInteractionMockRecorder
}

// MocktokenInteractionMockRecorder is the mock recorder for MocktokenInteraction.
type MocktokenInteractionMockRecorder struct {
	mock *MocktokenInteraction
}

// NewMocktokenInteraction creates a new mock instance.
func NewMocktokenInteraction(ctrl *gomock.Controller) *MocktokenInteraction {
	mock := &MocktokenInteraction{ctrl: ctrl}
	mock.recorder = &MocktokenInteractionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenInteraction) EXPECT() *MocktokenInteractionMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MocktokenInteraction) CreateToken(userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MocktokenInteractionMockRecorder) CreateToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MocktokenInteraction)(nil).CreateToken), userId)
}

// VerifyToken mocks base method.
func (m *MocktokenInteraction) VerifyToken(tokenString string) (*token.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*token.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MocktokenInteractionMockRecorder) VerifyToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MocktokenInteraction)(nil).VerifyToken), tokenString)
}
